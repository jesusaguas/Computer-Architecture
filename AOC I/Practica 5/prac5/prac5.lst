


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             datos,DATA
    2 00000000         ;variables y constantes
    3 00000000         
    4 00000000         ;Control de interrupciones
    5 00000000 FFFFF010 
                       VICIntEnable
                               EQU              0xFFFFF010  ;Habilita las inter
                                                            rupciones del VIC
    6 00000000 FFFFF014 
                       VICIntEnClr
                               EQU              0xFFFFF014  ;Deshabilita las in
                                                            terrupciones del VI
                                                            C
    7 00000000         
    8 00000000 00000004 
                       IRQ_I4  EQU              4           ;Nº de IRQ del Time
                                                            r 0 (reloj)
    9 00000000 00000007 
                       IRQ_I7  EQU              7           ;Nº de IRQ de la UA
                                                            RT 1 (teclado)
   10 00000000 00000080 
                       I_Bit   EQU              0x80        ;bit 7 de la CPSR, 
                                                            a 1 inhibe las inte
                                                            rrupciones IRQ
   11 00000000         
   12 00000000 FFFFF100 
                       VICVectAddr0
                               EQU              0xFFFFF100  ;Guarda la direccio
                                                            n de la RSI_IRQ0
   13 00000000 FFFFF030 
                       VICVectAddr
                               EQU              0xFFFFF030  ;Registro que al es
                                                            cribir desactiva la
                                                             petición de interr
                                                            upción del periféri
                                                            co
   14 00000000         
   15 00000000 E0028004 
                       IOSET   EQU              0xE0028004  ;Registro de datos 
                                                            del GPIO. Escribien
                                                            do 1’s se activan s
                                                            us bits
   16 00000000 E002800C 
                       IOCLR   EQU              0xE002800C  ;Registro de datos 
                                                            del GPIO. Escribien
                                                            do 1’s se desactiva
                                                            n los bits del IOSE
                                                            T
   17 00000000 E0004000 
                       T0_IR   EQU              0xE0004000  ;Registro de contro
                                                            l del Timer0 que al
                                                             escribir un 1 baja
                                                             la peticion
   18 00000000 E0010000 
                       TEC_DAT EQU              0xE0010000  ;Registro de datos 
                                                            del teclado, sirve 
                                                            para leer la tecla 
                                                            y bajar la peticion
                                                            



ARM Macro Assembler    Page 2 


   19 00000000         
   20 00000000         ;Direcciones relativas a la pantalla
   21 00000000 40007E00 
                       MARCADOR
                               EQU              0x40007E00  ;Direccion del marc
                                                            ador
   22 00000000 40007E20 
                       UP      EQU              0x40007E20  ;Direccion de la co
                                                            ta superior de la p
                                                            antalla
   23 00000000 40007EEC 
                       MID     EQU              0x40007EEC  ;Direccion de la mi
                                                            tad de la pantalla
   24 00000000 40007FFF 
                       DOWN    EQU              0x40007FFF  ;Direccion de la co
                                                            ta inferior de la p
                                                            antalla
   25 00000000 40007E07 
                       MARCVIDAS
                               EQU              0x40007E07  ;Direccion del marc
                                                            ador de vidas
   26 00000000 40007E1A 
                       MARCPUNTOS
                               EQU              0x40007E1A  ;Direccion del marc
                                                            ador de puntos
   27 00000000 40007EEF 
                       arrobapos1
                               EQU              0x40007EEF  ;Direccion inicial 
                                                            del arroba
   28 00000000 40007EF0 
                       arrobapos2
                               EQU              0x40007EF0  ;Direccion inicial 
                                                            del arroba
   29 00000000 40007F0F 
                       arrobapos3
                               EQU              0x40007F0F  ;Direccion inicial 
                                                            del arroba
   30 00000000 40007F10 
                       arrobapos4
                               EQU              0X40007F10  ;Direccion inicial 
                                                            del arroba
   31 00000000 00000000 
                       arroba  DCD              0           ;Direccion actual d
                                                            el arroba
   32 00000004 00000000 
                       fantasma1
                               DCD              0           ;Direccion actual d
                                                            el fantasma 1
   33 00000008 00000000 
                       fantasma2
                               DCD              0           ;Direccion actual d
                                                            el fantasma 2
   34 0000000C 00000000 
                       fantasma3
                               DCD              0           ;Direccion actual d
                                                            el fantasma 3
   35 00000010 00000000 
                       fantasma4
                               DCD              0           ;Direccion actual d



ARM Macro Assembler    Page 3 


                                                            el fantasma 4
   36 00000014         
   37 00000014         ;Variables auxiliares para el correcto del funcionamient
                       o del juego
   38 00000014 00      ticspacman
                               DCB              0           ;cuenta los tics de
                                                             pacman
   39 00000015 00      ticsfantasma
                               DCB              0           ;cuenta los tics de
                                                            l movimiento de los
                                                             fantasmas
   40 00000016 00      ticsnextfant
                               DCB              0           ;cuenta los tics pa
                                                            ra el siguiente fan
                                                            tasma
   41 00000017 00      ticsdisparo
                               DCB              0           ;cuenta los tics de
                                                             un disparo
   42 00000018 00      objfant1
                               DCB              0           ;Guarda el elemento
                                                             en el que se encue
                                                            ntra situado
   43 00000019 00      objfant2
                               DCB              0           ;Guarda el elemento
                                                             en el que se encue
                                                            ntra situado
   44 0000001A 00      objfant3
                               DCB              0           ;Guarda el elemento
                                                             en el que se encue
                                                            ntra situado
   45 0000001B 00      objfant4
                               DCB              0           ;Guarda el elemento
                                                             en el que se encue
                                                            ntra situado
   46 0000001C 59 4F 55 
              20 57 49 
              4E 21    menswin DCB              "YOU WIN!"  ;Mensaje al ganar e
                                                            l juego
   47 00000024 59 4F 55 
              20 4C 4F 
              53 45    menslose
                               DCB              "YOU LOSE"  ;Mensaje al perder 
                                                            el juego
   48 0000002C 59 4F 55 
              20 51 55 
              49 54    mensquit
                               DCB              "YOU QUIT"  ;Mensaje al abandon
                                                            ar el juego
   49 00000034 56 49 44 
              41 53    mensajevidas
                               DCB              "VIDAS"     ;Mensaje del marcad
                                                            or
   50 00000039 50 55 4E 
              54 4F 53 mensajepuntos
                               DCB              "PUNTOS"    ;Mensaje del marcad
                                                            or
   51 0000003F 00      tokens  DCB              0           ;Numero de tokens c
                                                            ogidos
   52 00000040 00      unidades



ARM Macro Assembler    Page 4 


                               DCB              0           ;Lleva la cuenta de
                                                             puntos
   53 00000041 00      decenas DCB              0           ;Lleva la cuenta de
                                                             puntos
   54 00000042 00      centenas
                               DCB              0           ;Lleva la cuenta de
                                                             puntos
   55 00000043 00      numfantasmas
                               DCB              0           ;Numero de fantasma
                                                            s(*) actualmente en
                                                             el juego
   56 00000044 00      randomnextfant
                               DCB              0           ;tiempo aleatorio p
                                                            ara el próximo fant
                                                            asma(*)
   57 00000045 00      dirx    DCB              0           ;mov. horizontal ar
                                                            roba (-1 izda.,0 st
                                                            op, 1 der.)
   58 00000046 00      diry    DCB              0           ;mov. vertical arro
                                                            ba (-1 arriba,0 sto
                                                            p,1 abajo)
   59 00000047 00      tecla   DCB              0           ;guarda la tecla pu
                                                            lsada en la interru
                                                            pcion del teclado
   60 00000048 000001FF 
                       mask9   EQU              0x1FF       ;mascara que habili
                                                            ta solo los 9 bits 
                                                            menos significativo
                                                            s
   61 00000048         
   62 00000048 00      fin     DCB              0           ;indicador fin de p
                                                            rograma (si vale 1)
                                                            
   63 00000049         
   64 00000049         ;Variables que se pueden modificar para cambiar los requ
                       isitos del juego
   65 00000049 01      velpacman
                               DCB              1           ;Velocidad inicial 
                                                            del pacman(@)  (1-1
                                                            28)
   66 0000004A 10      velfantasmas
                               DCB              16          ;Velocidad inicial 
                                                            de los fantasmas(*)
                                                             (1-128)
   67 0000004B         
   68 0000004B 03      vidas   DCB              3           ;Numero de vidas
   69 0000004C 64      tokens2win
                               DCB              100         ;Numero de tokens p
                                                            ara ganar(maximo 25
                                                            5)
   70 0000004D         
   71 0000004D         ;CODIGO
   72 0000004D                 AREA             codigo,CODE
   73 00000000                 EXPORT           inicio      ; forma de enlazar 
                                                            con el startup.s
   74 00000000                 IMPORT           srand       ; para poder invoca
                                                            r SBR srand
   75 00000000                 IMPORT           rand        ; para poder invoca
                                                            r SBR srand



ARM Macro Assembler    Page 5 


   76 00000000         
   77 00000000         inicio
   78 00000000         ;Generamos numeros aleatorios
   79 00000000 E59F0C50        ldr              r0,=T0_IR   ;crearemos la semil
                                                            la con T0_IR
   80 00000004 E52D0004        PUSH             {r0}        ;parametro por pila
                                                             a srand
   81 00000008 EBFFFFFE        bl               srand
   82 0000000C E24DD004        sub              sp, sp,#4   ;reservamos espacio
                                                             para el resultado
   83 00000010 EBFFFFFE        bl               rand
   84 00000014 E49D0004        POP              {r0}        ;obtenemos el prime
                                                            r numero aleatorio
   85 00000018 E59F1C3C        ldr              r1,=randomnextfant
   86 0000001C E200007F        and              r0,r0,#0x7F
   87 00000020 E2800008        add              r0,r0,#8
   88 00000024 E5C10000        strb             r0,[r1]
   89 00000028         
   90 00000028         ;Dibujamos la pantalla inicial 
   91 00000028         ;Rellenamos toda la pantalla
   92 00000028 E59F0C30        LDR              r0,=UP
   93 0000002C E59F1C30        LDR              r1,=DOWN
   94 00000030 E3A0202E        mov              r2,#'.'
   95 00000034 E1500001 
                       screen  cmp              r0,r1       ;Desde UP hasta DOW
                                                            N escribimos '.'
   96 00000038 CA000001        bgt              marcadr
   97 0000003C E4C02001        strb             r2,[r0],#1
   98 00000040 EAFFFFFB        b                screen
   99 00000044         ;Añadimos un marcador
  100 00000044 E59F0C1C 
                       marcadr LDR              r0,=MARCADOR
  101 00000048 E59F1C10        LDR              r1,=UP
  102 0000004C E3A02020        mov              r2,#' '
  103 00000050 E1500001 
                       bucmarc cmp              r0,r1       ;Desde MARCADOR has
                                                            ta UP escribimos ' 
                                                            '
  104 00000054 AA000001        bge              vd
  105 00000058 E4C02001        strb             r2,[r0],#1
  106 0000005C EAFFFFFB        b                bucmarc
  107 00000060         
  108 00000060 E59F0C00 
                       vd      LDR              r0,=MARCADOR
  109 00000064 E59F1C00        LDR              r1,=mensajevidas
  110 00000068 E3A03000        mov              r3,#0
  111 0000006C E3530005 
                       printvd cmp              r3,#5       ;Escribimos 'VIDAS'
                                                            
  112 00000070 0A000003        beq              numvds
  113 00000074 E4D12001        ldrb             r2,[r1],#1
  114 00000078 E4C02001        strb             r2,[r0],#1
  115 0000007C E2833001        add              r3,r3,#1
  116 00000080 EAFFFFF9        b                printvd
  117 00000084 E59F0BE4 
                       numvds  LDR              r0,=MARCVIDAS
  118 00000088 E59F1BE4        LDR              r1, =vidas  ;Numero de vidas
  119 0000008C E5D11000        ldrb             r1,[r1]
  120 00000090 E2811030        add              r1,r1,#48   ;pasamos a codigo A



ARM Macro Assembler    Page 6 


                                                            SCII
  121 00000094 E5C01000        strb             r1,[r0]
  122 00000098 EAFFFFFF        b                pts
  123 0000009C         
  124 0000009C E59F0BC4 
                       pts     LDR              r0,=MARCADOR
  125 000000A0 E59F1BD0        LDR              r1,=mensajepuntos
  126 000000A4 E2800010        add              r0,r0,#0x10
  127 000000A8 E3A03000        mov              r3,#0
  128 000000AC E3530006 
                       printpt cmp              r3,#6       ;Escribimos 'PUNTOS
                                                            '
  129 000000B0 0A000003        beq              numpts
  130 000000B4 E4D12001        ldrb             r2,[r1],#1
  131 000000B8 E4C02001        strb             r2,[r0],#1
  132 000000BC E2833001        add              r3,r3,#1
  133 000000C0 EAFFFFF9        b                printpt
  134 000000C4 E59F0BB0 
                       numpts  LDR              r0,=MARCPUNTOS
  135 000000C8 E59F1BB0        LDR              r1,=unidades ;Numero de unidade
                                                            s(puntos)
  136 000000CC E5D11000        ldrb             r1,[r1]
  137 000000D0 E2811030        add              r1,r1,#48   ;pasamos a codigo A
                                                            SCII
  138 000000D4 E4401001        strb             r1,[r0],#-1
  139 000000D8 E59F1BA4        LDR              r1,=decenas ;Numero de decenas(
                                                            puntos)
  140 000000DC E5D11000        ldrb             r1,[r1]
  141 000000E0 E2811030        add              r1,r1,#48   ;pasamos a codigo A
                                                            SCII
  142 000000E4 E4401001        strb             r1,[r0],#-1
  143 000000E8 E59F1B98        LDR              r1,=centenas ;Numero de centena
                                                            s(puntos)
  144 000000EC E5D11000        ldrb             r1,[r1]
  145 000000F0 E2811030        add              r1,r1,#48   ;pasamos a codigo A
                                                            SCII
  146 000000F4 E5C01000        strb             r1,[r0]
  147 000000F8 E59F1B80        LDR              r1,=unidades
  148 000000FC E5D11000        ldrb             r1,[r1]
  149 00000100 E2811030        add              r1,r1,#48   ;pasamos a codigo A
                                                            SCII
  150 00000104 E5C01000        strb             r1,[r0]
  151 00000108 EAFFFFFF        b                start
  152 0000010C         
  153 0000010C         start
  154 0000010C         ;Insertamos el @ en el juego
  155 0000010C E24DD004        sub              sp,sp,#4
  156 00000110 EBFFFFFE        bl               rand
  157 00000114 E49D0004        POP              {r0}
  158 00000118 E2000003        and              r0,r0,#0x3  ;numero aleatorio d
                                                            el 0 al 3
  159 0000011C E3A01040        mov              r1,#'@'
  160 00000120 E3500000        cmp              r0,#0       ;Si es 0
  161 00000124 059F2B60        ldreq            r2,=arrobapos1
  162 00000128 05C21000        strbeq           r1,[r2]
  163 0000012C 059F1B5C        ldreq            r1,=arroba
  164 00000130 05812000        streq            r2,[r1]
  165 00000134 E3500001        cmp              r0,#1       ;Si es 1
  166 00000138 059F2B54        ldreq            r2,=arrobapos2



ARM Macro Assembler    Page 7 


  167 0000013C 05C21000        strbeq           r1,[r2]
  168 00000140 059F1B48        ldreq            r1,=arroba
  169 00000144 05812000        streq            r2,[r1]
  170 00000148 E3500002        cmp              r0,#2       ;Si es 2
  171 0000014C 059F2B44        ldreq            r2,=arrobapos3
  172 00000150 05C21000        strbeq           r1,[r2]
  173 00000154 059F1B34        ldreq            r1,=arroba
  174 00000158 05812000        streq            r2,[r1]
  175 0000015C E3500003        cmp              r0,#3       ;Si es 3
  176 00000160 059F2B34        ldreq            r2,=arrobapos4
  177 00000164 05C21000        strbeq           r1,[r2]
  178 00000168 059F1B20        ldreq            r1,=arroba
  179 0000016C 05812000        streq            r2,[r1]
  180 00000170         
  181 00000170         ;Actualiza el vector de interrupciones para que @IRQ4 ->
                        RSI_reloj
  182 00000170 E59F0B28        ldr              r0, =VICVectAddr0
  183 00000174 E59F1B28        ldr              r1, =RSI_reloj
  184 00000178 E3A02004        mov              r2, #IRQ_I4
  185 0000017C E7801102        str              r1, [r0,r2,LSL#2]
  186 00000180         
  187 00000180         ;Actualiza el vector de interrupciones para que @IRQ7 ->
                        RSI_teclado
  188 00000180 E59F0B18        ldr              r0, =VICVectAddr0
  189 00000184 E59F1B1C        ldr              r1, =RSI_teclado
  190 00000188 E3A02007        mov              r2, #IRQ_I7
  191 0000018C E7801102        str              r1, [r0,r2,LSL#2]
  192 00000190         
  193 00000190         ;Habilita las interrupciones IRQ4,IRQ7
  194 00000190 E59F0B14        ldr              r0, =VICIntEnable
  195 00000194 E5901000        ldr              r1, [r0]
  196 00000198 E3811010        orr              r1, r1, #1<<IRQ_I4
  197 0000019C E3811080        orr              r1, r1, #1<<IRQ_I7
  198 000001A0 E5801000        str              r1, [r0]
  199 000001A4         
  200 000001A4         
  201 000001A4         ;codigo a ejecutar
  202 000001A4         bucle
  203 000001A4         ;Refrescamos los numeros aleatorios, para que no se repi
                       ta la misma secuencia.
  204 000001A4 E24DD004        sub              sp,sp,#4
  205 000001A8 EBFFFFFE        bl               rand
  206 000001AC E28DD004        add              sp,sp,#4
  207 000001B0         ;Miramos si hay que añadir un fantasma
  208 000001B0 E59F0AF8        ldr              r0,=ticsnextfant
  209 000001B4 E5D00000        ldrb             r0,[r0]
  210 000001B8 E59F1A9C        ldr              r1,=randomnextfant
  211 000001BC E5D11000        ldrb             r1,[r1]
  212 000001C0 E1500001        cmp              r0,r1       ;NUEVO FANTASMA si 
                                                            tics=nextfantasma 
  213 000001C4 BA00003E        blt              pacmove
  214 000001C8 E59F0AE4        ldr              r0,=numfantasmas
  215 000001CC E5D00000        ldrb             r0,[r0]
  216 000001D0 E3500004        cmp              r0,#4
  217 000001D4 BB000000        bllt             newfantasma
  218 000001D8 EA000039        b                pacmove
  219 000001DC         
  220 000001DC         ;Subrutina para añadir un fantasma al juego
  221 000001DC         newfantasma



ARM Macro Assembler    Page 8 


  222 000001DC E52DE004        PUSH             {lr}
  223 000001E0 E92D001F        PUSH             {r0-r4}
  224 000001E4         ;Incrementamos el numero de fantasmas
  225 000001E4 E59F0AC8        LDR              r0,=numfantasmas
  226 000001E8 E5D01000        ldrb             r1,[r0]
  227 000001EC E2811001        add              r1,r1,#1
  228 000001F0 E5C01000        strb             r1,[r0]
  229 000001F4         ;Posicion inicial aleatoria
  230 000001F4 E24DD004 
                       repeat  sub              sp,sp,#4
  231 000001F8 EBFFFFFE        bl               rand
  232 000001FC E49D0004        POP              {r0}
  233 00000200 E59F1AB0        ldr              r1,=mask9   ;r1=mascara que hab
                                                            ilita los 9 primero
                                                            s bits
  234 00000204 E0000001        and              r0,r0,r1    ;r0=offset aleatori
                                                            o entre 0-512 (9 bi
                                                            ts)
  235 00000208 E3500E1E        cmp              r0,#480
  236 0000020C AAFFFFF8        bge              repeat
  237 00000210 E59F1A48        ldr              r1,=UP      ;r1=direccion base 
                                                            de la pantalla
  238 00000214 E0811000        add              r1,r1,r0    ;posicion del nuevo
                                                             fantasma(base+offs
                                                            et)
  239 00000218 E5D12000        ldrb             r2,[r1]     ;Cargamos el conten
                                                            ido que hay
  240 0000021C E3A0302E        mov              r3,#'.'     ;¿Habia un punto an
                                                            teriormente?
  241 00000220 E1530002        cmp              r3,r2       ;Comparamos
  242 00000224 01A04003        moveq            r4,r3       ;Guardamos en r4 el
                                                             contenido anterior
                                                             a colocar el fanta
                                                            sma
  243 00000228 E3A03020        mov              r3,#' '     ;¿Habia un espacio 
                                                            anteriormente?
  244 0000022C E1530002        cmp              r3,r2       ;Comparamos
  245 00000230 01A04003        moveq            r4,r3       ;Guardamos en r3 el
                                                             contenido anterior
                                                             a colocar el fanta
                                                            sma
  246 00000234 E3A0302A        mov              r3,#'*'     ;r2=asterisco
  247 00000238 E5C13000        strb             r3,[r1]     ;añadimos el fantas
                                                            ma en la pantalla
  248 0000023C E59F0A70        ldr              r0,=numfantasmas
  249 00000240 E5D00000        ldrb             r0,[r0]
  250 00000244 E3500001        cmp              r0,#1       ;Si newfantasma = 1
                                                            
  251 00000248 059F2A6C        ldreq            r2,=fantasma1 ;Guardamos la dir
                                                            eccion actual del f
                                                            antasma 1
  252 0000024C 05821000        streq            r1,[r2]
  253 00000250 059F2A68        ldreq            r2,=objfant1 ;Guardamos el cont
                                                            enido anterior
  254 00000254 05C24000        strbeq           r4,[r2]
  255 00000258 E3500002        cmp              r0,#2       ;Si newfantasma = 2
                                                            
  256 0000025C 059F2A60        ldreq            r2,=fantasma2 ;Guardamos la dir
                                                            eccion actual del f



ARM Macro Assembler    Page 9 


                                                            antasma 2
  257 00000260 05821000        streq            r1,[r2]
  258 00000264 059F2A5C        ldreq            r2,=objfant2 ;Guardamos el cont
                                                            enido anterior
  259 00000268 05C24000        strbeq           r4,[r2]
  260 0000026C E3500003        cmp              r0,#3       ;Si newfantasma = 3
                                                            
  261 00000270 059F2A54        ldreq            r2,=fantasma3 ;Guardamos la dir
                                                            eccion actual del f
                                                            antasma 3
  262 00000274 05821000        streq            r1,[r2]
  263 00000278 059F2A50        ldreq            r2,=objfant3 ;Guardamos el cont
                                                            enido anterior
  264 0000027C 05C24000        strbeq           r4,[r2]
  265 00000280 E3500004        cmp              r0,#4       ;Si newfantasma = 4
                                                            
  266 00000284 059F2A48        ldreq            r2,=fantasma4 ;Guardamos la dir
                                                            eccion actual del f
                                                            antasma 4
  267 00000288 05821000        streq            r1,[r2]
  268 0000028C 059F2A44        ldreq            r2,=objfant4 ;Guardamos el cont
                                                            enido anterior
  269 00000290 05C24000        strbeq           r4,[r2]
  270 00000294         ;Preparo al siguiente fantasma
  271 00000294 E59F0A14        LDR              r0,=ticsnextfant
  272 00000298 E3A01000        mov              r1,#0       ;Reinicio el numero
                                                             de tics para el si
                                                            guiente fantasma
  273 0000029C E5C01000        strb             r1,[r0]
  274 000002A0 E24DD004        sub              sp, sp,#4   ;reservamos espacio
                                                             para el resultado
  275 000002A4 EBFFFFFE        bl               rand
  276 000002A8 E49D0004        POP              {r0}        ;obtenemos el numer
                                                            o aleatorio
  277 000002AC E59F19A8        LDR              r1,=randomnextfant
  278 000002B0 E200007F        and              r0,r0,#0x7F
  279 000002B4 E2800008        add              r0,r0,#8
  280 000002B8 E5C10000        strb             r0,[r1]
  281 000002BC         ;Volvemos
  282 000002BC E8BD001F        POP              {r0-r4}
  283 000002C0 E49DF004        POP              {pc}
  284 000002C4         
  285 000002C4         
  286 000002C4         ;¿Movemos a @?
  287 000002C4 E59F0A10 
                       pacmove LDR              r0,=ticspacman
  288 000002C8 E5D00000        ldrb             r0, [r0]
  289 000002CC E59F1A0C        LDR              r1,=velpacman
  290 000002D0 E5D11000        ldrb             r1,[r1]
  291 000002D4 E1500001        cmp              r0, r1
  292 000002D8 BA000087        blt              fantmov
  293 000002DC E59F0A00        LDR              r0,=dirx
  294 000002E0 E5D00000        ldrb             r0,[r0]
  295 000002E4 E3500000        cmp              r0,#0
  296 000002E8 1B000004        blne             mover
  297 000002EC E59F09F4        LDR              r0,=diry
  298 000002F0 E5D00000        ldrb             r0,[r0]
  299 000002F4 E3500000        cmp              r0,#0
  300 000002F8 1B000000        blne             mover



ARM Macro Assembler    Page 10 


  301 000002FC EA00007E        b                fantmov
  302 00000300         
  303 00000300         
  304 00000300         ;Subrutina que mueve el pacman(@)
  305 00000300 E52DE004 
                       mover   PUSH             {lr}
  306 00000304 E92D000F        PUSH             {r0-r3}
  307 00000308         ;Comprobamos si hay movimiento horizontal
  308 00000308 E59F09D4        LDR              r0,=dirx
  309 0000030C E5D00000        ldrb             r0,[r0]
  310 00000310 E3500000        cmp              r0,#0
  311 00000314 0A000025        beq              vertical    ;si NO hay movimien
                                                            to horizontal, salt
                                                            o a mirar el vertic
                                                            al
  312 00000318 E3700001        cmp              r0,#-1      ;SI hay,
  313 0000031C 0A000001        beq              izq         ;¿Se mueve a la izq
                                                            uierda?
  314 00000320 E3500001        cmp              r0,#1       ;¿Se mueve a la der
                                                            echa?
  315 00000324 0A000010        beq              der
  316 00000328         ;Movimiento a la izquierda
  317 00000328 E59F0960 
                       izq     LDR              r0,=arroba
  318 0000032C E5901000        ldr              r1,[r0]
  319 00000330 E59F2928        LDR              r2,=UP      ;Que no se escape p
                                                            or arriba
  320 00000334 E1510002        cmp              r1,r2
  321 00000338 0A000048        beq              finmov
  322 0000033C E3A03020        mov              r3,#' '     ;Pongo un espacio e
                                                            n la posicion del a
                                                            rroba
  323 00000340 E4413001        strb             r3,[r1],#-1 ;y actualizo a la n
                                                            ueva posicion
  324 00000344 E3A0302E        mov              r3,#'.'
  325 00000348 E5D12000        ldrb             r2,[r1]
  326 0000034C E1530002        cmp              r3,r2       ;Miro si a donde vo
                                                            y hay un token
  327 00000350 E92D0003        PUSH             {r0,r1}
  328 00000354 0B000050        bleq             addtok      ;Si lo hay, salto a
                                                             'añadir token'
  329 00000358 E8BD0003        POP              {r0,r1}
  330 0000035C E3A03040        mov              r3,#'@'     ;Pongo @ en la nuev
                                                            a posicion
  331 00000360 E5C13000        strb             r3,[r1]
  332 00000364 E5801000        str              r1,[r0]     ;Guardo la nueva po
                                                            sicion de @
  333 00000368 EA00003C        b                finmov
  334 0000036C         ;Movimiento a la derecha
  335 0000036C E59F091C 
                       der     LDR              r0,=arroba
  336 00000370 E5901000        ldr              r1,[r0]
  337 00000374 E59F28E8        ldr              r2,=DOWN    ;Que no se escape p
                                                            or abajo
  338 00000378 E1510002        cmp              r1,r2
  339 0000037C 0A000037        beq              finmov
  340 00000380 E3A03020        mov              r3,#' '     ;Pongo un espacio e
                                                            n la posicion del a
                                                            rroba



ARM Macro Assembler    Page 11 


  341 00000384 E4C13001        strb             r3,[r1],#1
  342 00000388 E3A0302E        mov              r3,#'.'
  343 0000038C E5D12000        ldrb             r2,[r1]
  344 00000390 E1530002        cmp              r3,r2       ;Miro si a donde vo
                                                            y hay un token
  345 00000394 E92D0003        PUSH             {r0,r1}
  346 00000398 0B00003F        bleq             addtok      ;Si lo hay, salto a
                                                             'añadir token'
  347 0000039C E8BD0003        POP              {r0,r1}
  348 000003A0 E3A03040        mov              r3,#'@'     ;Pongo @ en la nuev
                                                            a posicion
  349 000003A4 E5C13000        strb             r3,[r1]
  350 000003A8 E5801000        str              r1,[r0]     ;Guardo la nueva po
                                                            sicion de @
  351 000003AC EA00002B        b                finmov
  352 000003B0         ;Comprobamos si hay movimiento vertical
  353 000003B0         vertical
  354 000003B0 E59F0930        LDR              r0,=diry
  355 000003B4 E5D00000        ldrb             r0,[r0]
  356 000003B8 E3500000        cmp              r0,#0
  357 000003BC 0A000027        beq              finmov      ;si NO hay movimien
                                                            to vertical salto a
                                                             finalizar
  358 000003C0 E3700001        cmp              r0,#-1      ;SI hay, 
  359 000003C4 0A000001        beq              arriba      ;¿Se mueve arriba?
  360 000003C8 E3500001        cmp              r0,#1
  361 000003CC 0A000011        beq              abajo       ;¿Se mueve abajo?
  362 000003D0         ;Movimiento hacia arriba
  363 000003D0 E59F08B8 
                       arriba  LDR              r0,=arroba
  364 000003D4 E5901000        ldr              r1,[r0]
  365 000003D8 E59F2880        ldr              r2,=UP      ;Que no se escape p
                                                            or arriba
  366 000003DC E2822020        add              r2,r2,#0x20
  367 000003E0 E1510002        cmp              r1,r2
  368 000003E4 BA00001D        blt              finmov
  369 000003E8 E3A03020        mov              r3,#' '     ;Pongo un espacio e
                                                            n la posicion del a
                                                            rroba
  370 000003EC E4413020        strb             r3,[r1],#-0x20
  371 000003F0 E3A0302E        mov              r3,#'.'
  372 000003F4 E5D12000        ldrb             r2,[r1]
  373 000003F8 E1530002        cmp              r3,r2       ;Miro si a donde vo
                                                            y hay un token
  374 000003FC E92D0003        PUSH             {r0,r1}
  375 00000400 0B000025        bleq             addtok      ;Si lo hay, salto a
                                                             'añadir token'
  376 00000404 E8BD0003        POP              {r0,r1}
  377 00000408 E3A03040        mov              r3,#'@'     ;Pongo @ en la nuev
                                                            a posicion
  378 0000040C E5C13000        strb             r3,[r1]     ;Escribo el @     
  379 00000410 E5801000        str              r1,[r0]     ;Guardo la nueva po
                                                            sicion de @
  380 00000414 EA000011        b                finmov
  381 00000418         ;Movimiento hacia abajo
  382 00000418 E59F0870 
                       abajo   LDR              r0,=arroba
  383 0000041C E5901000        ldr              r1,[r0]
  384 00000420 E59F283C        ldr              r2,=DOWN    ;Que no se escape p



ARM Macro Assembler    Page 12 


                                                            or abajo
  385 00000424 E2422020        sub              r2,r2,#0x20
  386 00000428 E1510002        cmp              r1,r2
  387 0000042C CA00000B        bgt              finmov
  388 00000430 E3A03020        mov              r3,#' '     ;Pongo un espacio e
                                                            n la posicion del a
                                                            rroba
  389 00000434 E4C13020        strb             r3,[r1],#0x20
  390 00000438 E3A0302E        mov              r3,#'.'
  391 0000043C E5D12000        ldrb             r2,[r1]
  392 00000440 E1530002        cmp              r3,r2       ;Miro si a donde vo
                                                            y hay un token
  393 00000444 E92D0003        PUSH             {r0,r1}
  394 00000448 0B000013        bleq             addtok      ;Si lo hay, salto a
                                                             'añadir token'
  395 0000044C E8BD0003        POP              {r0,r1}
  396 00000450 E3A03040        mov              r3,#'@'     ;Pongo @ en la nuev
                                                            a posicion
  397 00000454 E5C13000        strb             r3,[r1]
  398 00000458 E5801000        str              r1,[r0]     ;Guardo la nueva po
                                                            sicion de @
  399 0000045C EAFFFFFF        b                finmov
  400 00000460         ;Finalizacion del movimiento
  401 00000460 E3A01000 
                       finmov  mov              r1,#0
  402 00000464 E59F0870        LDR              r0,=ticspacman ;Reinicializamos
                                                             los tics
  403 00000468 E5C01000        strb             r1,[r0]
  404 0000046C E59F0870        LDR              r0,=dirx
  405 00000470 E5C01000        strb             r1,[r0]     ;Reinicializamos el
                                                             movimiento
  406 00000474 E59F086C        LDR              r0,=diry
  407 00000478 E5C01000        strb             r1,[r0]
  408 0000047C E59F0868        LDR              r0,=tokens  ;Miro si al moverno
                                                            s hemos conseguido
  409 00000480 E5D00000        ldrb             r0,[r0]     ;el numero máximo d
                                                            e tokens
  410 00000484 E59F1864        LDR              r1,=tokens2win
  411 00000488 E5D11000        ldrb             r1,[r1]
  412 0000048C E1500001        cmp              r0,r1
  413 00000490 0B00014B        bleq             dofinal
  414 00000494         ;Volvemos
  415 00000494 E8BD000F        POP              {r0-r3}
  416 00000498 E49DF004        POP              {pc}
  417 0000049C         
  418 0000049C         ;Subrutina que suma un token y actualiza las variables q
                       ue controlan el marcador de puntos
  419 0000049C E52DE004 
                       addtok  PUSH             {lr}
  420 000004A0 E92D003F        PUSH             {r0-r5}
  421 000004A4         ;Actualizamos variable 'numero de tokens'
  422 000004A4 E59F0840        LDR              r0,=tokens
  423 000004A8 E5D01000        ldrb             r1,[r0]
  424 000004AC E2811001        add              r1,r1,#1    ;token++
  425 000004B0 E5C01000        strb             r1,[r0]
  426 000004B4         ;Actualizamos unidades, decenas y centenas
  427 000004B4 E59F07C4        LDR              r0,=unidades
  428 000004B8 E5D01000        ldrb             r1,[r0]
  429 000004BC E59F27C0        LDR              r2,=decenas



ARM Macro Assembler    Page 13 


  430 000004C0 E5D23000        ldrb             r3,[r2]
  431 000004C4 E59F47BC        LDR              r4,=centenas
  432 000004C8 E5D45000        ldrb             r5,[r4]
  433 000004CC E2811001        add              r1,r1,#1    ;Sumamos +1 a unida
                                                            des
  434 000004D0 E3510009        cmp              r1,#9
  435 000004D4 C3A01000        movgt            r1,#0       ;Si unidades desbor
                                                            dan (>9)
  436 000004D8 C2833001        addgt            r3,r3,#1
  437 000004DC E3530009        cmp              r3,#9
  438 000004E0 C3A03000        movgt            r3,#0       ;Si decenas desbord
                                                            an (>9)
  439 000004E4 C2855001        addgt            r5,r5,#1
  440 000004E8 E5C01000        strb             r1,[r0]     ;Guardamos unidades
                                                            
  441 000004EC E5C23000        strb             r3,[r2]     ; decenas
  442 000004F0 E5C45000        strb             r5,[r4]     ; y centenas
  443 000004F4         ;Volvemos
  444 000004F4 E8BD003F        POP              {r0-r5}
  445 000004F8 E49DF004        POP              {pc}
  446 000004FC         
  447 000004FC         ;¿Movemos a los asteriscos?
  448 000004FC E59F07F0 
                       fantmov LDR              r0,=ticsfantasma
  449 00000500 E5D00000        ldrb             r0,[r0]
  450 00000504 E59F17EC        LDR              r1,=velfantasmas
  451 00000508 E5D11000        ldrb             r1,[r1]
  452 0000050C E1500001        cmp              r0, r1      ;¿TOCA MOVER?-- tic
                                                            s = vel??
  453 00000510 BA0000A4        blt              cuidado
  454 00000514 E59F4798        LDR              r4,=numfantasmas ;Numero de fan
                                                            tasmas a mover
  455 00000518 E5D44000        ldrb             r4,[r4]
  456 0000051C         ;Movemos al fantasma 1
  457 0000051C E3540001        cmp              r4,#1       ;Existe fantasma 1?
                                                            ?
  458 00000520 BA000039        blt              finf
  459 00000524 E59F0790        LDR              r0,=fantasma1
  460 00000528 E5900000        ldr              r0,[r0]
  461 0000052C E59F178C        LDR              r1,=objfant1
  462 00000530 E5D11000        ldrb             r1,[r1]     ;Cargamos el conten
                                                            ido anterior
  463 00000534 E24DD008        sub              sp,sp,#8    ;Reservamos espacio
                                                             para el resultado
  464 00000538 E92D0003        PUSH             {r0,r1}     ;Paso de parámetros
                                                             por pila
  465 0000053C EB000036        bl               movfant     ;movemos el fantasm
                                                            a1
  466 00000540 E28DD008        add              sp,sp,#8    ;Eliminamos los par
                                                            ámetros
  467 00000544 E8BD0003        POP              {r0,r1}     ;Recogemos los resu
                                                            ltados
  468 00000548 E59F276C        LDR              r2,=fantasma1
  469 0000054C E5820000        str              r0,[r2]     ;Guardamos el nuevo
                                                             contenido anterior
                                                            
  470 00000550 E59F3768        LDR              r3,=objfant1
  471 00000554 E5C31000        strb             r1,[r3]     ;Guardamos el nuevo
                                                             contenido anterior



ARM Macro Assembler    Page 14 


                                                            
  472 00000558         ;Movemos al fantasma 2
  473 00000558 E3540002        cmp              r4,#2       ;Existe fantasma 2?
                                                            ?
  474 0000055C BA00002A        blt              finf
  475 00000560 E59F075C        LDR              r0,=fantasma2
  476 00000564 E5900000        ldr              r0,[r0]
  477 00000568 E59F1758        LDR              r1,=objfant2
  478 0000056C E5D11000        ldrb             r1,[r1]     ;Cargamos el conten
                                                            ido anterior
  479 00000570 E24DD008        sub              sp,sp,#8    ;Reservamos espacio
                                                             para el resultado
  480 00000574 E92D0003        PUSH             {r0,r1}     ;Paso de parámetros
                                                             por pila
  481 00000578 EB000027        bl               movfant     ;movemos el fantasm
                                                            a2
  482 0000057C E28DD008        add              sp,sp,#8    ;Eliminamos los par
                                                            ámetros
  483 00000580 E8BD0003        POP              {r0,r1}     ;Recogemos los resu
                                                            ltados
  484 00000584 E59F2738        LDR              r2,=fantasma2
  485 00000588 E5820000        str              r0,[r2]     ;Guardamos el nuevo
                                                             contenido anterior
                                                            
  486 0000058C E59F3734        LDR              r3,=objfant2
  487 00000590 E5C31000        strb             r1,[r3]     ;Guardamos el nuevo
                                                             contenido anterior
                                                            
  488 00000594         ;Movemos al fantasma 3
  489 00000594 E3540003        cmp              r4,#3       ;Existe fantasma 3?
                                                            ?
  490 00000598 BA00001B        blt              finf
  491 0000059C E59F0728        LDR              r0,=fantasma3
  492 000005A0 E5900000        ldr              r0,[r0]
  493 000005A4 E59F1724        LDR              r1,=objfant3
  494 000005A8 E5D11000        ldrb             r1,[r1]     ;Cargamos el conten
                                                            ido anterior
  495 000005AC E24DD008        sub              sp,sp,#8    ;Reservamos espacio
                                                             para el resultado
  496 000005B0 E92D0003        PUSH             {r0,r1}     ;Paso de parámetros
                                                             por pila
  497 000005B4 EB000018        bl               movfant     ;movemos el fantasm
                                                            a3
  498 000005B8 E28DD008        add              sp,sp,#8    ;Eliminamos los par
                                                            ámetros
  499 000005BC E8BD0003        POP              {r0,r1}     ;Recogemos los resu
                                                            ltados
  500 000005C0 E59F2704        LDR              r2,=fantasma3
  501 000005C4 E5820000        str              r0,[r2]     ;Guardamos el nuevo
                                                             contenido anterior
                                                            
  502 000005C8 E59F3700        LDR              r3,=objfant3
  503 000005CC E5C31000        strb             r1,[r3]     ;Guardamos el nuevo
                                                             contenido anterior
                                                            
  504 000005D0         ;Movemos al fantasma 4
  505 000005D0 E3540004        cmp              r4,#4       ;Existe fantasma 4?
                                                            ?
  506 000005D4 BA00000C        blt              finf



ARM Macro Assembler    Page 15 


  507 000005D8 E59F06F4        LDR              r0,=fantasma4
  508 000005DC E5900000        ldr              r0,[r0]
  509 000005E0 E59F16F0        LDR              r1,=objfant4
  510 000005E4 E5D11000        ldrb             r1,[r1]     ;Cargamos el conten
                                                            ido anterior
  511 000005E8 E24DD008        sub              sp,sp,#8    ;Reservamos espacio
                                                             para el resultado
  512 000005EC E92D0003        PUSH             {r0,r1}     ;Paso de parámetros
                                                             por pila
  513 000005F0 EB000009        bl               movfant     ;movemos el fantasm
                                                            a4
  514 000005F4 E28DD008        add              sp,sp,#8    ;Eliminamos los par
                                                            ámetros
  515 000005F8 E8BD0003        POP              {r0,r1}     ;Recogemos los resu
                                                            ltados
  516 000005FC E59F26D0        LDR              r2,=fantasma4
  517 00000600 E5820000        str              r0,[r2]     ;Guardamos el nuevo
                                                             contenido anterior
                                                            
  518 00000604 E59F36CC        LDR              r3,=objfant4
  519 00000608 E5C31000        strb             r1,[r3]     ;Guardamos el nuevo
                                                             contenido anterior
                                                            
  520 0000060C         
  521 0000060C E3A01000 
                       finf    mov              r1,#0
  522 00000610 E59F06DC        LDR              r0,=ticsfantasma ;Reinicializam
                                                            os los tics
  523 00000614 E5C01000        strb             r1,[r0]
  524 00000618 EA000062        b                cuidado
  525 0000061C         
  526 0000061C         ;Subrutina que dado un fantasma(*) lo mueve aleatoriamen
                       te
  527 0000061C         ;Recibe 2 parámetros por pila y devuelve los 2 resultado
                       s por pila
  528 0000061C E92D4800 
                       movfant PUSH             {lr,fp}
  529 00000620 E1A0B00D        mov              fp,sp
  530 00000624 E92D000F        PUSH             {r0-r3}
  531 00000628         ;Para todos los fantasmas
  532 00000628 E24DD004        sub              sp,sp,#4
  533 0000062C EBFFFFFE        bl               rand
  534 00000630 E49D0004        POP              {r0}
  535 00000634 E2000003        and              r0,r0,#3    ;Numero aleatorio d
                                                            e 0 a 3, 0->izq, 1-
                                                            >der, 2->arriba, 3-
                                                            >abajo
  536 00000638 E3500000        cmp              r0,#0
  537 0000063C 0A000005        beq              movleft     ;0->izq
  538 00000640 E3500001        cmp              r0,#1
  539 00000644 0A000017        beq              movrigt     ;1->der
  540 00000648 E3500002        cmp              r0,#2
  541 0000064C 0A000029        beq              movup       ;2->arriba
  542 00000650 E3500003        cmp              r0,#3
  543 00000654 0A00003C        beq              movdown     ;3->abajo
  544 00000658         ;Movemos el fantasma a la izquierda
  545 00000658 E59B0008 
                       movleft ldr              r0,[fp,#8]  ;Cargamos la direcc
                                                            ion del fantasma



ARM Macro Assembler    Page 16 


  546 0000065C E5DB100C        ldrb             r1,[fp,#12] ;Cargamos el conten
                                                            ido anterior
  547 00000660 E59F25F8        LDR              r2,=UP
  548 00000664 E1500002        cmp              r0,r2       ;Que no se escape p
                                                            or arriba
  549 00000668 05CB1014        strbeq           r1,[fp,#20] ;Y lo guardamos com
                                                            o resultado
  550 0000066C 058B0010        streq            r0,[fp,#16] ;También guardamos 
                                                            la nueva direccion
  551 00000670 0A00004A        beq              endmov
  552 00000674 E3A03040        mov              r3,#'@'
  553 00000678 E1510003        cmp              r1,r3       ;Si anteriormente h
                                                            abia estba pacman(@
                                                            ) pones un espacio
  554 0000067C 03A01020        moveq            r1,#' '
  555 00000680 E3A0302A        mov              r3,#'*'
  556 00000684 E1510003        cmp              r1,r3       ;Si anteriormente h
                                                            abia un fantasma(*)
                                                             pones un espacio
  557 00000688 03A01020        moveq            r1,#' '
  558 0000068C E4401001        strb             r1,[r0],#-1 ;Escribimos el cont
                                                            enido anterior y ac
                                                            tualizamos la nueva
                                                             posicion
  559 00000690 E5D01000        ldrb             r1,[r0]     ;Cargamos el conten
                                                            ido de la nueva dir
                                                            eccion
  560 00000694 E5CB1014        strb             r1,[fp,#20] ;Y lo guardamos com
                                                            o resultado
  561 00000698 E58B0010        str              r0,[fp,#16] ;También guardamos 
                                                            la nueva direccion
  562 0000069C E3A0302A        mov              r3,#'*'
  563 000006A0 E5C03000        strb             r3,[r0]     ;Escribimos al fant
                                                            asma(*) en la nueva
                                                             posicion
  564 000006A4 EA00003D        b                endmov
  565 000006A8         ;Movemos el fantasma a la derecha
  566 000006A8 E59B0008 
                       movrigt ldr              r0,[fp,#8]  ;Cargamos la direcc
                                                            ion del fantasma
  567 000006AC E5DB100C        ldrb             r1,[fp,#12] ;Cargamos el conten
                                                            ido anterior
  568 000006B0 E59F25AC        LDR              r2,=DOWN
  569 000006B4 E1500002        cmp              r0,r2       ;Que no se escape p
                                                            or abajo
  570 000006B8 05CB1014        strbeq           r1,[fp,#20] ;Y lo guardamos com
                                                            o resultado
  571 000006BC 058B0010        streq            r0,[fp,#16] ;También guardamos 
                                                            la nueva direccion
  572 000006C0 0A000036        beq              endmov
  573 000006C4 E3A03040        mov              r3,#'@'
  574 000006C8 E1510003        cmp              r1,r3       ;Si anteriormente h
                                                            abia estba pacman(@
                                                            ) pones un espacio
  575 000006CC 03A01020        moveq            r1,#' '
  576 000006D0 E3A0302A        mov              r3,#'*'
  577 000006D4 E1510003        cmp              r1,r3       ;Si anteriormente h
                                                            abia un fantasma(*)
                                                             pones un espacio



ARM Macro Assembler    Page 17 


  578 000006D8 03A01020        moveq            r1,#' '
  579 000006DC E4C01001        strb             r1,[r0],#1  ;Escribimos el cont
                                                            enido anterior y ac
                                                            tualizamos la nueva
                                                             posicion
  580 000006E0 E5D01000        ldrb             r1,[r0]     ;Cargamos el conten
                                                            ido de la nueva dir
                                                            eccion
  581 000006E4 E5CB1014        strb             r1,[fp,#20] ;Y lo guardamos com
                                                            o resultado
  582 000006E8 E58B0010        str              r0,[fp,#16] ;También guardamos 
                                                            la nueva direccion
  583 000006EC E3A0302A        mov              r3,#'*'
  584 000006F0 E5C03000        strb             r3,[r0]     ;Escribimos al fant
                                                            asma(*) en la nueva
                                                             posicion
  585 000006F4 EA000029        b                endmov
  586 000006F8         ;Movemos el fantasma arriba
  587 000006F8 E59B0008 
                       movup   ldr              r0,[fp,#8]  ;Cargamos la direcc
                                                            ion del fantasma
  588 000006FC E5DB100C        ldrb             r1,[fp,#12] ;Cargamos el conten
                                                            ido anterior
  589 00000700 E59F2558        ldr              r2,=UP
  590 00000704 E2822020        add              r2,r2,#0x20
  591 00000708 E1500002        cmp              r0,r2       ;Que no se escape p
                                                            or arriba
  592 0000070C B5CB1014        strblt           r1,[fp,#20] ;Y lo guardamos com
                                                            o resultado
  593 00000710 B58B0010        strlt            r0,[fp,#16] ;También guardamos 
                                                            la nueva direccion
  594 00000714 BA000021        blt              endmov
  595 00000718 E3A03040        mov              r3,#'@'
  596 0000071C E1510003        cmp              r1,r3       ;Si anteriormente h
                                                            abia estba pacman(@
                                                            ) pones un espacio
  597 00000720 03A01020        moveq            r1,#' '
  598 00000724 E3A0302A        mov              r3,#'*'
  599 00000728 E1510003        cmp              r1,r3       ;Si anteriormente h
                                                            abia un fantasma(*)
                                                             pones un espacio
  600 0000072C 03A01020        moveq            r1,#' '
  601 00000730 E4401020        strb             r1,[r0],#-0x20 ;Escribimos el c
                                                            ontenido anterior y
                                                             actualizamos la nu
                                                            eva posicion
  602 00000734 E5D01000        ldrb             r1,[r0]     ;Cargamos el conten
                                                            ido de la nueva dir
                                                            eccion
  603 00000738 E5CB1014        strb             r1,[fp,#20] ;Y lo guardamos com
                                                            o resultado
  604 0000073C E58B0010        str              r0,[fp,#16] ;También guardamos 
                                                            la nueva direccion
  605 00000740 E3A0302A        mov              r3,#'*'
  606 00000744 E5C03000        strb             r3,[r0]     ;Escribimos al fant
                                                            asma(*) en la nueva
                                                             posicion
  607 00000748 EA000014        b                endmov
  608 0000074C         ;Movemos el fantasma abajo



ARM Macro Assembler    Page 18 


  609 0000074C E59B0008 
                       movdown ldr              r0,[fp,#8]  ;Cargamos la direcc
                                                            ion del fantasma
  610 00000750 E5DB100C        ldrb             r1,[fp,#12] ;Cargamos el conten
                                                            ido anterior
  611 00000754 E59F2508        ldr              r2,=DOWN
  612 00000758 E2422020        sub              r2,r2,#0x20
  613 0000075C E1500002        cmp              r0,r2       ;Que no se escape p
                                                            or abajo
  614 00000760 C5CB1014        strbgt           r1,[fp,#20] ;Y lo guardamos com
                                                            o resultado
  615 00000764 C58B0010        strgt            r0,[fp,#16] ;También guardamos 
                                                            la nueva direccion
  616 00000768 CA00000C        bgt              endmov
  617 0000076C E3A03040        mov              r3,#'@'
  618 00000770 E1510003        cmp              r1,r3       ;Si anteriormente h
                                                            abia estba pacman(@
                                                            ) pones un espacio
  619 00000774 03A01020        moveq            r1,#' '
  620 00000778 E3A0302A        mov              r3,#'*'
  621 0000077C E1510003        cmp              r1,r3       ;Si anteriormente h
                                                            abia un fantasma(*)
                                                             pones un espacio
  622 00000780 03A01020        moveq            r1,#' '
  623 00000784 E4C01020        strb             r1,[r0],#0x20 ;Escribimos el co
                                                            ntenido anterior y 
                                                            actualizamos la nue
                                                            va posicion
  624 00000788 E5D01000        ldrb             r1,[r0]     ;Cargamos el conten
                                                            ido de la nueva dir
                                                            eccion
  625 0000078C E5CB1014        strb             r1,[fp,#20] ;Y lo guardamos com
                                                            o resultado
  626 00000790 E58B0010        str              r0,[fp,#16] ;También guardamos 
                                                            la nueva direccion
  627 00000794 E3A0302A        mov              r3,#'*'
  628 00000798 E5C03000        strb             r3,[r0]     ;Escribimos al fant
                                                            asma(*) en la nueva
                                                             posicion
  629 0000079C EAFFFFFF        b                endmov
  630 000007A0         ;Finalizacion del movimiento
  631 000007A0         endmov
  632 000007A0         ;Volvemos
  633 000007A0 E8BD000F        POP              {r0-r3}
  634 000007A4 E8BD8800        POP              {pc,fp}
  635 000007A8         
  636 000007A8         
  637 000007A8         
  638 000007A8         ;Miro si un fantasma ha pillado a pacman
  639 000007A8 E59F04E0 
                       cuidado LDR              r0,=arroba
  640 000007AC E5900000        ldr              r0,[r0]
  641 000007B0         ;Compruebo fantasma 1
  642 000007B0 E59F1504        LDR              r1,=fantasma1
  643 000007B4 E5911000        ldr              r1,[r1]
  644 000007B8 E1500001        cmp              r0,r1
  645 000007BC 0B00000C        bleq             pillado
  646 000007C0         ;Compruebo fantasma 2
  647 000007C0 E59F14FC        LDR              r1,=fantasma2



ARM Macro Assembler    Page 19 


  648 000007C4 E5911000        ldr              r1,[r1]
  649 000007C8 E1500001        cmp              r0,r1
  650 000007CC 0B000008        bleq             pillado
  651 000007D0         ;Compruebo fantasma 3
  652 000007D0 E59F14F4        LDR              r1,=fantasma3
  653 000007D4 E5911000        ldr              r1,[r1]
  654 000007D8 E1500001        cmp              r0,r1
  655 000007DC 0B000004        bleq             pillado
  656 000007E0         ;Compruebo fantasma 4
  657 000007E0 E59F14EC        LDR              r1,=fantasma4
  658 000007E4 E5911000        ldr              r1,[r1]
  659 000007E8 E1500001        cmp              r0,r1
  660 000007EC 0B000000        bleq             pillado
  661 000007F0 EA000026        b                teclas
  662 000007F4         
  663 000007F4         ;Upss.. El fantasma te ha pillado
  664 000007F4         ;Una vida menos
  665 000007F4 E52DE004 
                       pillado PUSH             {lr}
  666 000007F8 E92D0007        PUSH             {r0-r2}
  667 000007FC E59F0470        LDR              r0,=vidas
  668 00000800 E5D01000        ldrb             r1,[r0]
  669 00000804 E2411001        sub              r1,r1,#1
  670 00000808 E5C01000        strb             r1,[r0]
  671 0000080C E3510000        cmp              r1,#0
  672 00000810         ;Si es la última FIN DEL JUEGO
  673 00000810 0B00006B        bleq             dofinal
  674 00000814         ;Sino reinicio el pacman y los fantasmas
  675 00000814         ;Borramos el @ de su posicion actual
  676 00000814 E59F0474        LDR              r0,=arroba
  677 00000818 E5900000        ldr              r0,[r0]
  678 0000081C E3A01020        mov              r1,#' '
  679 00000820 E5C01000        strb             r1,[r0]
  680 00000824         ;Insertamos el @ en el juego
  681 00000824 E24DD004        sub              sp,sp,#4
  682 00000828 EBFFFFFE        bl               rand
  683 0000082C E49D0004        POP              {r0}
  684 00000830 E2000003        and              r0,r0,#0x3  ;numero aleatorio d
                                                            el 0 al 3
  685 00000834 E3A01040        mov              r1,#'@'
  686 00000838 E3500000        cmp              r0,#0       ;Si es 0
  687 0000083C 059F2448        ldreq            r2,=arrobapos1
  688 00000840 05C21000        strbeq           r1,[r2]
  689 00000844 059F1444        ldreq            r1,=arroba
  690 00000848 05812000        streq            r2,[r1]
  691 0000084C E3500001        cmp              r0,#1       ;Si es 1
  692 00000850 059F243C        ldreq            r2,=arrobapos2
  693 00000854 05C21000        strbeq           r1,[r2]
  694 00000858 059F1430        ldreq            r1,=arroba
  695 0000085C 05812000        streq            r2,[r1]
  696 00000860 E3500002        cmp              r0,#2       ;Si es 2
  697 00000864 059F242C        ldreq            r2,=arrobapos3
  698 00000868 05C21000        strbeq           r1,[r2]
  699 0000086C 059F141C        ldreq            r1,=arroba
  700 00000870 05812000        streq            r2,[r1]
  701 00000874 E3500003        cmp              r0,#3       ;Si es 3
  702 00000878 059F241C        ldreq            r2,=arrobapos4
  703 0000087C 05C21000        strbeq           r1,[r2]
  704 00000880 059F1408        ldreq            r1,=arroba



ARM Macro Assembler    Page 20 


  705 00000884 05812000        streq            r2,[r1]
  706 00000888         ;Volvemos
  707 00000888 E8BD0007        POP              {r0-r2}
  708 0000088C E49DF004        POP              {pc}
  709 00000890         
  710 00000890         
  711 00000890         
  712 00000890         ;Comprubo si se ha pulsado alguna tecla
  713 00000890 E59F0464 
                       teclas  LDR              r0,=tecla
  714 00000894 E5D00000        ldrb             r0,[r0]
  715 00000898 E3500000        cmp              r0,#0
  716 0000089C 1B000000        blne             newtecl
  717 000008A0 EA00004E        b                update
  718 000008A4         
  719 000008A4         
  720 000008A4         ;Subrutina que analiza la tecla pulsada
  721 000008A4 E52DE004 
                       newtecl PUSH             {lr}
  722 000008A8 E92D0007        PUSH             {r0-r2}
  723 000008AC         ;Miro que tecla se ha pulsado
  724 000008AC E59F0448        LDR              r0,=tecla   ;Cargo la tecla pul
                                                            sada
  725 000008B0 E5D00000        ldrb             r0,[r0]
  726 000008B4 E3500041 
                       a       cmp              r0,#'A'     ;Si es A
  727 000008B8 1A000003        bne              d
  728 000008BC E3E01000        mov              r1,#-1      ;dirx = -1
  729 000008C0 E59F241C        LDR              r2,=dirx
  730 000008C4 E5C21000        strb             r1,[r2]
  731 000008C8 EA000038        b                fintecl
  732 000008CC E3500044 
                       d       cmp              r0,#'D'     ;Si es D
  733 000008D0 1A000003        bne              w
  734 000008D4 E3A01001        mov              r1,#1       ;dirx = 1
  735 000008D8 E59F2404        LDR              r2,=dirx
  736 000008DC E5C21000        strb             r1,[r2]
  737 000008E0 EA000032        b                fintecl
  738 000008E4 E3500057 
                       w       cmp              r0,#'W'     ;Si es W
  739 000008E8 1A000003        bne              s
  740 000008EC E3E01000        mov              r1,#-1      ;diry = -1
  741 000008F0 E59F23F0        LDR              r2,=diry
  742 000008F4 E5C21000        strb             r1,[r2]
  743 000008F8 EA00002C        b                fintecl
  744 000008FC E3500053 
                       s       cmp              r0,#'S'     ;Si es S
  745 00000900 1A000003        bne              mas
  746 00000904 E3A01001        mov              r1,#1       ;diry = 1
  747 00000908 E59F23D8        LDR              r2,=diry
  748 0000090C E5C21000        strb             r1,[r2]
  749 00000910 EA000026        b                fintecl
  750 00000914 E350002B 
                       mas     cmp              r0,#'+'     ;Si es +
  751 00000918 1A000006        bne              menos
  752 0000091C E59F13BC        LDR              r1,=velpacman ;velpacman++
  753 00000920 E5D12000        ldrb             r2,[r1]
  754 00000924 E3520001        cmp              r2,#1
  755 00000928 0A000020        beq              fintecl



ARM Macro Assembler    Page 21 


  756 0000092C E1A020A2        mov              r2,r2,LSR#1
  757 00000930 E5C12000        strb             r2,[r1]
  758 00000934 EA00001D        b                fintecl
  759 00000938 E350002D 
                       menos   cmp              r0,#'-'     ;Si es -
  760 0000093C 1A000006        bne              plus
  761 00000940 E59F1398        LDR              r1,=velpacman ;velpacman--
  762 00000944 E5D12000        ldrb             r2,[r1]
  763 00000948 E3520080        cmp              r2,#128
  764 0000094C 0A000017        beq              fintecl
  765 00000950 E1A02082        mov              r2,r2,LSL#1
  766 00000954 E5C12000        strb             r2,[r1]
  767 00000958 0A000014        beq              fintecl
  768 0000095C E3500050 
                       plus    cmp              r0,#'P'     ;Si es P
  769 00000960 1A000006        bne              minus
  770 00000964 E59F138C        LDR              r1,=velfantasmas 
                                                            ;velfantasmas++
  771 00000968 E5D12000        ldrb             r2,[r1]
  772 0000096C E3520001        cmp              r2,#1
  773 00000970 0A00000E        beq              fintecl
  774 00000974 E1A020A2        mov              r2,r2,LSR#1
  775 00000978 E5C12000        strb             r2,[r1]
  776 0000097C EA00000B        b                fintecl
  777 00000980 E350004D 
                       minus   cmp              r0,#'M'     ;Si es M
  778 00000984 1A000006        bne              q
  779 00000988 E59F1368        LDR              r1,=velfantasmas 
                                                            ;velfantasmas--
  780 0000098C E5D12000        ldrb             r2,[r1]
  781 00000990 E3520080        cmp              r2,#128
  782 00000994 0A000005        beq              fintecl
  783 00000998 E1A02082        mov              r2,r2,LSL#1
  784 0000099C E5C12000        strb             r2,[r1]
  785 000009A0 EA000002        b                fintecl
  786 000009A4 E3500051 
                       q       cmp              r0,#'Q'     ;Si es Q
  787 000009A8 0A000005        beq              dofinal     ;fin=1
  788 000009AC EAFFFFFF        b                fintecl
  789 000009B0         fintecl
  790 000009B0 E3A01000        mov              r1,#0
  791 000009B4 E59F0340        LDR              r0,=tecla   ;Miro la tecla puls
                                                            ada
  792 000009B8 E5C01000        strb             r1,[r0]
  793 000009BC         ;Volvemos
  794 000009BC E8BD0007        POP              {r0-r2}
  795 000009C0 E49DF004        POP              {pc}
  796 000009C4         
  797 000009C4         ;Subrutina que finaliza la partida (fin=1)
  798 000009C4 E52DE004 
                       dofinal PUSH             {lr}
  799 000009C8 E92D0003        PUSH             {r0-r1}
  800 000009CC E59F032C        LDR              r0,=fin     ;fin = 1
  801 000009D0 E3A01001        mov              r1,#1
  802 000009D4 E5C01000        strb             r1,[r0]
  803 000009D8         ;Volvemos
  804 000009D8 E8BD0003        POP              {r0-r1}
  805 000009DC E49DF004        POP              {pc}
  806 000009E0         



ARM Macro Assembler    Page 22 


  807 000009E0         ;Actualizamos el marcador de vidas y puntos
  808 000009E0 E59F0288 
                       update  LDR              r0,=MARCVIDAS
  809 000009E4 E59F1288        LDR              r1,=vidas
  810 000009E8 E5D11000        ldrb             r1,[r1]
  811 000009EC E2811030        add              r1,r1,#48   ;pasamos a codigo A
                                                            SCII
  812 000009F0 E5C01000        strb             r1,[r0]
  813 000009F4 E59F0280        LDR              r0,=MARCPUNTOS
  814 000009F8 E59F1280        LDR              r1,=unidades
  815 000009FC E5D11000        ldrb             r1,[r1]
  816 00000A00 E2811030        add              r1,r1,#48   ;pasamos a codigo A
                                                            SCII
  817 00000A04 E4401001        strb             r1,[r0],#-1
  818 00000A08 E59F1274        LDR              r1,=decenas
  819 00000A0C E5D11000        ldrb             r1,[r1]
  820 00000A10 E2811030        add              r1,r1,#48   ;pasamos a codigo A
                                                            SCII
  821 00000A14 E4401001        strb             r1,[r0],#-1
  822 00000A18 E59F1268        LDR              r1,=centenas
  823 00000A1C E5D11000        ldrb             r1,[r1]
  824 00000A20 E2811030        add              r1,r1,#48   ;pasamos a codigo A
                                                            SCII
  825 00000A24 E5C01000        strb             r1,[r0]
  826 00000A28 EAFFFFFF        b                finbuc
  827 00000A2C         ;Fin del bucle, ¿Repetimos?
  828 00000A2C         finbuc
  829 00000A2C E59F02CC        LDR              r0,=fin     ;si fin=0 salto a b
                                                            ucle
  830 00000A30 E5D01000        ldrb             r1,[r0]     ;sino
  831 00000A34 E3510000        cmp              r1,#0       ;
  832 00000A38 0AFFFDD9        beq              bucle
  833 00000A3C         
  834 00000A3C         ;Mensaje de finalizacion
  835 00000A3C         ;Borramos toda la pantalla de juego
  836 00000A3C E59F021C        LDR              r0,=UP
  837 00000A40 E59F121C        LDR              r1,=DOWN
  838 00000A44 E3A02020        mov              r2,#' '
  839 00000A48 E1500001 
                       clear   cmp              r0,r1
  840 00000A4C CA000001        bgt              mensaje
  841 00000A50 E4C02001        strb             r2,[r0],#1
  842 00000A54 EAFFFFFB        b                clear
  843 00000A58         ;Mostramos el mensaje por pantalla
  844 00000A58 E59F02A4 
                       mensaje LDR              r0,=MID
  845 00000A5C         ;VICTORIA
  846 00000A5C E59F1288 
                       win     LDR              r1,=tokens
  847 00000A60 E5D11000        ldrb             r1,[r1]
  848 00000A64 E59F2284        LDR              r2,=tokens2win
  849 00000A68 E5D22000        ldrb             r2,[r2]
  850 00000A6C E1510002        cmp              r1,r2
  851 00000A70 BA000007        blt              lose
  852 00000A74 E59F128C        LDR              r1,=menswin
  853 00000A78 E3A03000        mov              r3,#0
  854 00000A7C E3530008 
                       print   cmp              r3,#8
  855 00000A80 0A000017        beq              ggwp



ARM Macro Assembler    Page 23 


  856 00000A84 E4D12001        ldrb             r2,[r1],#1
  857 00000A88 E4C02001        strb             r2,[r0],#1
  858 00000A8C E2833001        add              r3,r3,#1
  859 00000A90 EAFFFFF9        b                print
  860 00000A94         ;DERROTA
  861 00000A94 E59F11D8 
                       lose    LDR              r1,=vidas
  862 00000A98 E5D12000        ldrb             r2,[r1]
  863 00000A9C E3520000        cmp              r2,#0
  864 00000AA0 1A000007        bne              quit
  865 00000AA4 E59F1260        ldr              r1,=menslose
  866 00000AA8 E3A03000        mov              r3,#0
  867 00000AAC E3530008 
                       print2  cmp              r3,#8
  868 00000AB0 0A00000B        beq              ggwp
  869 00000AB4 E4D12001        ldrb             r2,[r1],#1
  870 00000AB8 E4C02001        strb             r2,[r0],#1
  871 00000ABC E2833001        add              r3,r3,#1
  872 00000AC0 EAFFFFF9        b                print2
  873 00000AC4         ;ABANDONO
  874 00000AC4 E59F1244 
                       quit    ldr              r1,=mensquit
  875 00000AC8 E3A03000        mov              r3,#0
  876 00000ACC E3530008 
                       print3  cmp              r3,#8
  877 00000AD0 0A000003        beq              ggwp
  878 00000AD4 E4D12001        ldrb             r2,[r1],#1
  879 00000AD8 E4C02001        strb             r2,[r0],#1
  880 00000ADC E2833001        add              r3,r3,#1
  881 00000AE0 EAFFFFF9        b                print3
  882 00000AE4         
  883 00000AE4         
  884 00000AE4         
  885 00000AE4         ;Deshabilitar interrupciones
  886 00000AE4 E59F0228 
                       ggwp    ldr              r0,=VICIntEnClr
  887 00000AE8 E5901000        ldr              r1,[r0]     ;desactivar IRQ4,IR
                                                            Q7
  888 00000AEC E3811010        orr              r1,r1,#1<<IRQ_I4 ;desactivar RS
                                                            I_reloj
  889 00000AF0 E3811080        orr              r1,r1,#1<<IRQ_I7 ;desactivar RS
                                                            I_boton
  890 00000AF4 E5801000        str              r1,[r0]
  891 00000AF8         
  892 00000AF8 EAFFFFFE 
                       bfin    b                bfin
  893 00000AFC         
  894 00000AFC         
  895 00000AFC         RSI_reloj                            ;Rutina de servicio
                                                             de la interrupcion
                                                             IRQ4 (timer 0) 
  896 00000AFC         ;Cada 0,01 s. llega una peticion de interrupcion
  897 00000AFC         ;guarda direccion de retorno y palabra de estado
  898 00000AFC E24EE004        sub              lr,lr,#4
  899 00000B00 E52DE004        PUSH             {lr}
  900 00000B04 E14FE000        mrs              r14,spsr
  901 00000B08 E52DE004        PUSH             {r14}
  902 00000B0C         ;salva registros a usar
  903 00000B0C E92D0003        PUSH             {r0-r1}



ARM Macro Assembler    Page 24 


  904 00000B10         ;activa IRQ's
  905 00000B10 E10F1000        mrs              r1,cpsr
  906 00000B14 E3C11080        bic              r1,r1,#I_Bit ;pone a 0 el bit d
                                                            e las IRQ
  907 00000B18 E121F001        msr              cpsr_c,r1
  908 00000B1C         ;desactiva del VIC la peticion
  909 00000B1C E59F0134        LDR              r0,=T0_IR   ;bajar peticion HW 
                                                            IRQ [4]
  910 00000B20 E3A01001        mov              r1,#1
  911 00000B24 E5801000        str              r1,[r0]
  912 00000B28         ;tratamiento de la interrupcion     
  913 00000B28 E59F01AC        ldr              r0,=ticspacman ; +1 tics @
  914 00000B2C E5D01000        ldrb             r1,[r0]
  915 00000B30 E2811001        add              r1,r1,#1
  916 00000B34 E5C01000        strb             r1,[r0]
  917 00000B38 E59F01B4        ldr              r0,=ticsfantasma ;+1 tics *
  918 00000B3C E5D01000        ldrb             r1,[r0]
  919 00000B40 E2811001        add              r1,r1,#1
  920 00000B44 E5C01000        strb             r1,[r0]
  921 00000B48 E59F0160        ldr              r0,=ticsnextfant ;+1 tics para 
                                                            siguiente fantasma
  922 00000B4C E5D01000        ldrb             r1,[r0]
  923 00000B50 E2811001        add              r1,r1,#1
  924 00000B54 E5C01000        strb             r1,[r0]
  925 00000B58 E59F01B8        ldr              r0,=ticsdisparo 
                                                            ;+1 tics disparo
  926 00000B5C E5D01000        ldrb             r1,[r0]
  927 00000B60 E2811001        add              r1,r1,#1
  928 00000B64 E5C01000        strb             r1,[r0]
  929 00000B68         ;desactiva IRQ's
  930 00000B68 E10F1000        mrs              r1,cpsr
  931 00000B6C E3811080        orr              r1,r1,#I_Bit
  932 00000B70 E121F001        msr              cpsr_c,r1
  933 00000B74         ;restaura registros
  934 00000B74 E8BD0003        POP              {r0-r1}
  935 00000B78         ;desapila spsr y retorna al programa principal  
  936 00000B78 E49DE004        POP              {r14}
  937 00000B7C E16FF00E        msr              spsr_cxfs,r14 ;restaura el spsr
                                                             de la pila
  938 00000B80 E59FE194        ldr              r14,=VICVectAddr
  939 00000B84 E58EE000        str              r14,[r14]
  940 00000B88 E8FD8000        POP              {pc}^
  941 00000B8C         
  942 00000B8C         
  943 00000B8C         RSI_teclado                          ;Rutina de servicio
                                                             a la interrupcion 
                                                            IRQ 7 (teclado)
  944 00000B8C         ;al pulsar cada tecla llega peticion de interrupcion IRQ
                       7
  945 00000B8C         ;guarda direccion de retorno y palabra de estado
  946 00000B8C E24EE004        sub              lr,lr,#4
  947 00000B90 E52DE004        PUSH             {lr}
  948 00000B94 E14FE000        mrs              r14,spsr
  949 00000B98 E52DE004        PUSH             {r14}
  950 00000B9C         ;salva registros a usar
  951 00000B9C E92D0003        PUSH             {r0-r1}
  952 00000BA0         ;activa IRQ's
  953 00000BA0 E10F1000        mrs              r1,cpsr
  954 00000BA4 E3C11080        bic              r1,r1,#I_Bit ;pone a 0 el bit d



ARM Macro Assembler    Page 25 


                                                            e las IRQ
  955 00000BA8 E121F001        msr              cpsr_c,r1
  956 00000BAC         ;transferencia de datos
  957 00000BAC E59F116C        LDR              r1,=TEC_DAT ;r1=@R_DATOS tec. v
                                                            irtual
  958 00000BB0 E5D10000        ldrb             r0,[r1]     ;r0 codigo ASCII te
                                                            cla
  959 00000BB4         ;tratamiento de la interrupcion     
  960 00000BB4 E59F1140        LDR              r1,=tecla
  961 00000BB8         ;teclas especiales
  962 00000BB8 E350002B        cmp              r0,#'+'     ;si es + lo pongo e
                                                            n tecla y salgo -> 
                                                            Velocidad asterisco
                                                             +
  963 00000BBC 05C10000        strbeq           r0,[r1]
  964 00000BC0 0A00001B        beq              fintec
  965 00000BC4 E350002D        cmp              r0,#'-'     ;si es - lo pongo e
                                                            n tecla y salgo -> 
                                                            Velocidad asterisco
                                                             -
  966 00000BC8 05C10000        strbeq           r0,[r1]
  967 00000BCC 0A000018        beq              fintec
  968 00000BD0 E3500020        cmp              r0,#' '     ;si es espacio lo p
                                                            ongo en tecla y sal
                                                            go -> Disparar
  969 00000BD4 05C10000        strbeq           r0,[r1]
  970 00000BD8 0A000015        beq              fintec
  971 00000BDC         ;teclas alfabeticas
  972 00000BDC E3C00020        bic              r0,r0,#2_100000 ;la convierto a
                                                             mayuscula
  973 00000BE0 E3500041        cmp              r0,#'A'     ;si es A lo pongo e
                                                            n tecla y salgo -> 
                                                            Izquierda
  974 00000BE4 05C10000        strbeq           r0,[r1]
  975 00000BE8 0A000011        beq              fintec
  976 00000BEC E3500044        cmp              r0,#'D'     ;si es D lo pongo e
                                                            n tecla y salgo -> 
                                                            Derecha
  977 00000BF0 05C10000        strbeq           r0,[r1]
  978 00000BF4 0A00000E        beq              fintec
  979 00000BF8 E3500053        cmp              r0,#'S'     ;si es S lo pongo e
                                                            n tecla y salgo -> 
                                                            Abajo
  980 00000BFC 05C10000        strbeq           r0,[r1]
  981 00000C00 0A00000B        beq              fintec
  982 00000C04 E3500057        cmp              r0,#'W'     ;si es W lo pongo e
                                                            n tecla y salgo -> 
                                                            Arriba
  983 00000C08 05C10000        strbeq           r0,[r1]
  984 00000C0C 0A000008        beq              fintec
  985 00000C10 E3500050        cmp              r0, #'P'    ;si es P lo pongo e
                                                            n tecla y salgo -> 
                                                            Velocidad enemigos 
                                                            plus
  986 00000C14 05C10000        strbeq           r0, [r1]
  987 00000C18 0A000005        beq              fintec
  988 00000C1C E350004D        cmp              r0, #'M'    ;si es M lo pongo e
                                                            n tecla y salgo -> 
                                                            Velocidad enemigos 



ARM Macro Assembler    Page 26 


                                                            minus
  989 00000C20 05C10000        strbeq           r0, [r1]
  990 00000C24 0A000002        beq              fintec
  991 00000C28 E3500051        cmp              r0, #'Q'    ;si es Q lo pongo e
                                                            n tecla y salgo -> 
                                                            Quit
  992 00000C2C 05C10000        strbeq           r0, [r1]
  993 00000C30 0AFFFFFF        beq              fintec
  994 00000C34         ;strbeq r0, [r1]
  995 00000C34         ;LDR r1,=fin
  996 00000C34         ;moveq r0,#1
  997 00000C34         ;strbeq r0,[r1]
  998 00000C34         
  999 00000C34         fintec
 1000 00000C34         ;desactiva IRQ's
 1001 00000C34 E10F1000        mrs              r1,cpsr
 1002 00000C38 E3811080        orr              r1,r1,#I_Bit
 1003 00000C3C E121F001        msr              cpsr_c,r1
 1004 00000C40         ;restaura registros
 1005 00000C40 E8BD0003        POP              {r0-r1}
 1006 00000C44         ;desapila spsr y retorna al programa principal  
 1007 00000C44 E49DE004        POP              {r14}
 1008 00000C48 E16FF00E        msr              spsr_cxfs,r14 ;restaura el spsr
                                                             de la pila
 1009 00000C4C E59FE0C8        ldr              r14,=VICVectAddr
 1010 00000C50 E58EE000        str              r14,[r14]
 1011 00000C54 E8FD8000        POP              {pc}^
 1012 00000C58         
 1013 00000C58         
 1014 00000C58                 END
              E0004000 
              00000000 
              40007E20 
              40007FFF 
              40007E00 
              00000000 
              40007E07 
              00000000 
              00000000 
              40007E1A 
              00000000 
              00000000 
              00000000 
              40007EEF 
              00000000 
              40007EF0 
              40007F0F 
              40007F10 
              FFFFF100 
              00000000 
              00000000 
              FFFFF010 
              00000000 
              00000000 
              000001FF 
              00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 27 


              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              40007EEC 
              00000000 
              00000000 
              00000000 
              FFFFF014 
              00000000 
              FFFFF030 
              E0010000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\p
rac5.d -o.\prac5.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC
:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__UVISION_VE
RSION SETA 514" --list=.\prac5.lst prac5.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

arroba 00000000

Symbol: arroba
   Definitions
      At line 31 in file prac5.s
   Uses
      At line 163 in file prac5.s
      At line 168 in file prac5.s
      At line 173 in file prac5.s
      At line 178 in file prac5.s
      At line 317 in file prac5.s
      At line 335 in file prac5.s
      At line 363 in file prac5.s
      At line 382 in file prac5.s
      At line 639 in file prac5.s
      At line 676 in file prac5.s
      At line 689 in file prac5.s
      At line 694 in file prac5.s
      At line 699 in file prac5.s
      At line 704 in file prac5.s

centenas 00000042

Symbol: centenas
   Definitions
      At line 54 in file prac5.s
   Uses
      At line 143 in file prac5.s
      At line 431 in file prac5.s
      At line 822 in file prac5.s

datos 00000000

Symbol: datos
   Definitions
      At line 1 in file prac5.s
   Uses
      None
Comment: datos unused
decenas 00000041

Symbol: decenas
   Definitions
      At line 53 in file prac5.s
   Uses
      At line 139 in file prac5.s
      At line 429 in file prac5.s
      At line 818 in file prac5.s

dirx 00000045

Symbol: dirx
   Definitions
      At line 57 in file prac5.s
   Uses
      At line 293 in file prac5.s
      At line 308 in file prac5.s
      At line 404 in file prac5.s
      At line 729 in file prac5.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 735 in file prac5.s

diry 00000046

Symbol: diry
   Definitions
      At line 58 in file prac5.s
   Uses
      At line 297 in file prac5.s
      At line 354 in file prac5.s
      At line 406 in file prac5.s
      At line 741 in file prac5.s
      At line 747 in file prac5.s

fantasma1 00000004

Symbol: fantasma1
   Definitions
      At line 32 in file prac5.s
   Uses
      At line 251 in file prac5.s
      At line 459 in file prac5.s
      At line 468 in file prac5.s
      At line 642 in file prac5.s

fantasma2 00000008

Symbol: fantasma2
   Definitions
      At line 33 in file prac5.s
   Uses
      At line 256 in file prac5.s
      At line 475 in file prac5.s
      At line 484 in file prac5.s
      At line 647 in file prac5.s

fantasma3 0000000C

Symbol: fantasma3
   Definitions
      At line 34 in file prac5.s
   Uses
      At line 261 in file prac5.s
      At line 491 in file prac5.s
      At line 500 in file prac5.s
      At line 652 in file prac5.s

fantasma4 00000010

Symbol: fantasma4
   Definitions
      At line 35 in file prac5.s
   Uses
      At line 266 in file prac5.s
      At line 507 in file prac5.s
      At line 516 in file prac5.s
      At line 657 in file prac5.s

fin 00000048



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: fin
   Definitions
      At line 62 in file prac5.s
   Uses
      At line 800 in file prac5.s
      At line 829 in file prac5.s

mensajepuntos 00000039

Symbol: mensajepuntos
   Definitions
      At line 50 in file prac5.s
   Uses
      At line 125 in file prac5.s
Comment: mensajepuntos used once
mensajevidas 00000034

Symbol: mensajevidas
   Definitions
      At line 49 in file prac5.s
   Uses
      At line 109 in file prac5.s
Comment: mensajevidas used once
menslose 00000024

Symbol: menslose
   Definitions
      At line 47 in file prac5.s
   Uses
      At line 865 in file prac5.s
Comment: menslose used once
mensquit 0000002C

Symbol: mensquit
   Definitions
      At line 48 in file prac5.s
   Uses
      At line 874 in file prac5.s
Comment: mensquit used once
menswin 0000001C

Symbol: menswin
   Definitions
      At line 46 in file prac5.s
   Uses
      At line 852 in file prac5.s
Comment: menswin used once
numfantasmas 00000043

Symbol: numfantasmas
   Definitions
      At line 55 in file prac5.s
   Uses
      At line 214 in file prac5.s
      At line 225 in file prac5.s
      At line 248 in file prac5.s
      At line 454 in file prac5.s




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

objfant1 00000018

Symbol: objfant1
   Definitions
      At line 42 in file prac5.s
   Uses
      At line 253 in file prac5.s
      At line 461 in file prac5.s
      At line 470 in file prac5.s

objfant2 00000019

Symbol: objfant2
   Definitions
      At line 43 in file prac5.s
   Uses
      At line 258 in file prac5.s
      At line 477 in file prac5.s
      At line 486 in file prac5.s

objfant3 0000001A

Symbol: objfant3
   Definitions
      At line 44 in file prac5.s
   Uses
      At line 263 in file prac5.s
      At line 493 in file prac5.s
      At line 502 in file prac5.s

objfant4 0000001B

Symbol: objfant4
   Definitions
      At line 45 in file prac5.s
   Uses
      At line 268 in file prac5.s
      At line 509 in file prac5.s
      At line 518 in file prac5.s

randomnextfant 00000044

Symbol: randomnextfant
   Definitions
      At line 56 in file prac5.s
   Uses
      At line 85 in file prac5.s
      At line 210 in file prac5.s
      At line 277 in file prac5.s

tecla 00000047

Symbol: tecla
   Definitions
      At line 59 in file prac5.s
   Uses
      At line 713 in file prac5.s
      At line 724 in file prac5.s
      At line 791 in file prac5.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 960 in file prac5.s

ticsdisparo 00000017

Symbol: ticsdisparo
   Definitions
      At line 41 in file prac5.s
   Uses
      At line 925 in file prac5.s
Comment: ticsdisparo used once
ticsfantasma 00000015

Symbol: ticsfantasma
   Definitions
      At line 39 in file prac5.s
   Uses
      At line 448 in file prac5.s
      At line 522 in file prac5.s
      At line 917 in file prac5.s

ticsnextfant 00000016

Symbol: ticsnextfant
   Definitions
      At line 40 in file prac5.s
   Uses
      At line 208 in file prac5.s
      At line 271 in file prac5.s
      At line 921 in file prac5.s

ticspacman 00000014

Symbol: ticspacman
   Definitions
      At line 38 in file prac5.s
   Uses
      At line 287 in file prac5.s
      At line 402 in file prac5.s
      At line 913 in file prac5.s

tokens 0000003F

Symbol: tokens
   Definitions
      At line 51 in file prac5.s
   Uses
      At line 408 in file prac5.s
      At line 422 in file prac5.s
      At line 846 in file prac5.s

tokens2win 0000004C

Symbol: tokens2win
   Definitions
      At line 69 in file prac5.s
   Uses
      At line 410 in file prac5.s
      At line 848 in file prac5.s




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

unidades 00000040

Symbol: unidades
   Definitions
      At line 52 in file prac5.s
   Uses
      At line 135 in file prac5.s
      At line 147 in file prac5.s
      At line 427 in file prac5.s
      At line 814 in file prac5.s

velfantasmas 0000004A

Symbol: velfantasmas
   Definitions
      At line 66 in file prac5.s
   Uses
      At line 450 in file prac5.s
      At line 770 in file prac5.s
      At line 779 in file prac5.s

velpacman 00000049

Symbol: velpacman
   Definitions
      At line 65 in file prac5.s
   Uses
      At line 289 in file prac5.s
      At line 752 in file prac5.s
      At line 761 in file prac5.s

vidas 0000004B

Symbol: vidas
   Definitions
      At line 68 in file prac5.s
   Uses
      At line 118 in file prac5.s
      At line 667 in file prac5.s
      At line 809 in file prac5.s
      At line 861 in file prac5.s

33 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RSI_reloj 00000AFC

Symbol: RSI_reloj
   Definitions
      At line 895 in file prac5.s
   Uses
      At line 183 in file prac5.s
Comment: RSI_reloj used once
RSI_teclado 00000B8C

Symbol: RSI_teclado
   Definitions
      At line 943 in file prac5.s
   Uses
      At line 189 in file prac5.s
Comment: RSI_teclado used once
a 000008B4

Symbol: a
   Definitions
      At line 726 in file prac5.s
   Uses
      None
Comment: a unused
abajo 00000418

Symbol: abajo
   Definitions
      At line 382 in file prac5.s
   Uses
      At line 361 in file prac5.s
Comment: abajo used once
addtok 0000049C

Symbol: addtok
   Definitions
      At line 419 in file prac5.s
   Uses
      At line 328 in file prac5.s
      At line 346 in file prac5.s
      At line 375 in file prac5.s
      At line 394 in file prac5.s

arriba 000003D0

Symbol: arriba
   Definitions
      At line 363 in file prac5.s
   Uses
      At line 359 in file prac5.s
Comment: arriba used once
bfin 00000AF8

Symbol: bfin
   Definitions
      At line 892 in file prac5.s
   Uses
      At line 892 in file prac5.s
Comment: bfin used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

bucle 000001A4

Symbol: bucle
   Definitions
      At line 202 in file prac5.s
   Uses
      At line 832 in file prac5.s
Comment: bucle used once
bucmarc 00000050

Symbol: bucmarc
   Definitions
      At line 103 in file prac5.s
   Uses
      At line 106 in file prac5.s
Comment: bucmarc used once
clear 00000A48

Symbol: clear
   Definitions
      At line 839 in file prac5.s
   Uses
      At line 842 in file prac5.s
Comment: clear used once
codigo 00000000

Symbol: codigo
   Definitions
      At line 72 in file prac5.s
   Uses
      None
Comment: codigo unused
cuidado 000007A8

Symbol: cuidado
   Definitions
      At line 639 in file prac5.s
   Uses
      At line 453 in file prac5.s
      At line 524 in file prac5.s

d 000008CC

Symbol: d
   Definitions
      At line 732 in file prac5.s
   Uses
      At line 727 in file prac5.s
Comment: d used once
der 0000036C

Symbol: der
   Definitions
      At line 335 in file prac5.s
   Uses
      At line 315 in file prac5.s
Comment: der used once
dofinal 000009C4




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: dofinal
   Definitions
      At line 798 in file prac5.s
   Uses
      At line 413 in file prac5.s
      At line 673 in file prac5.s
      At line 787 in file prac5.s

endmov 000007A0

Symbol: endmov
   Definitions
      At line 631 in file prac5.s
   Uses
      At line 551 in file prac5.s
      At line 564 in file prac5.s
      At line 572 in file prac5.s
      At line 585 in file prac5.s
      At line 594 in file prac5.s
      At line 607 in file prac5.s
      At line 616 in file prac5.s
      At line 629 in file prac5.s

fantmov 000004FC

Symbol: fantmov
   Definitions
      At line 448 in file prac5.s
   Uses
      At line 292 in file prac5.s
      At line 301 in file prac5.s

finbuc 00000A2C

Symbol: finbuc
   Definitions
      At line 828 in file prac5.s
   Uses
      At line 826 in file prac5.s
Comment: finbuc used once
finf 0000060C

Symbol: finf
   Definitions
      At line 521 in file prac5.s
   Uses
      At line 458 in file prac5.s
      At line 474 in file prac5.s
      At line 490 in file prac5.s
      At line 506 in file prac5.s

finmov 00000460

Symbol: finmov
   Definitions
      At line 401 in file prac5.s
   Uses
      At line 321 in file prac5.s
      At line 333 in file prac5.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 339 in file prac5.s
      At line 351 in file prac5.s
      At line 357 in file prac5.s
      At line 368 in file prac5.s
      At line 380 in file prac5.s
      At line 387 in file prac5.s
      At line 399 in file prac5.s

fintec 00000C34

Symbol: fintec
   Definitions
      At line 999 in file prac5.s
   Uses
      At line 964 in file prac5.s
      At line 967 in file prac5.s
      At line 970 in file prac5.s
      At line 975 in file prac5.s
      At line 978 in file prac5.s
      At line 981 in file prac5.s
      At line 984 in file prac5.s
      At line 987 in file prac5.s
      At line 990 in file prac5.s
      At line 993 in file prac5.s

fintecl 000009B0

Symbol: fintecl
   Definitions
      At line 789 in file prac5.s
   Uses
      At line 731 in file prac5.s
      At line 737 in file prac5.s
      At line 743 in file prac5.s
      At line 749 in file prac5.s
      At line 755 in file prac5.s
      At line 758 in file prac5.s
      At line 764 in file prac5.s
      At line 767 in file prac5.s
      At line 773 in file prac5.s
      At line 776 in file prac5.s
      At line 782 in file prac5.s
      At line 785 in file prac5.s
      At line 788 in file prac5.s

ggwp 00000AE4

Symbol: ggwp
   Definitions
      At line 886 in file prac5.s
   Uses
      At line 855 in file prac5.s
      At line 868 in file prac5.s
      At line 877 in file prac5.s

inicio 00000000

Symbol: inicio
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 77 in file prac5.s
   Uses
      At line 73 in file prac5.s
Comment: inicio used once
izq 00000328

Symbol: izq
   Definitions
      At line 317 in file prac5.s
   Uses
      At line 313 in file prac5.s
Comment: izq used once
lose 00000A94

Symbol: lose
   Definitions
      At line 861 in file prac5.s
   Uses
      At line 851 in file prac5.s
Comment: lose used once
marcadr 00000044

Symbol: marcadr
   Definitions
      At line 100 in file prac5.s
   Uses
      At line 96 in file prac5.s
Comment: marcadr used once
mas 00000914

Symbol: mas
   Definitions
      At line 750 in file prac5.s
   Uses
      At line 745 in file prac5.s
Comment: mas used once
menos 00000938

Symbol: menos
   Definitions
      At line 759 in file prac5.s
   Uses
      At line 751 in file prac5.s
Comment: menos used once
mensaje 00000A58

Symbol: mensaje
   Definitions
      At line 844 in file prac5.s
   Uses
      At line 840 in file prac5.s
Comment: mensaje used once
minus 00000980

Symbol: minus
   Definitions
      At line 777 in file prac5.s
   Uses
      At line 769 in file prac5.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Comment: minus used once
movdown 0000074C

Symbol: movdown
   Definitions
      At line 609 in file prac5.s
   Uses
      At line 543 in file prac5.s
Comment: movdown used once
mover 00000300

Symbol: mover
   Definitions
      At line 305 in file prac5.s
   Uses
      At line 296 in file prac5.s
      At line 300 in file prac5.s

movfant 0000061C

Symbol: movfant
   Definitions
      At line 528 in file prac5.s
   Uses
      At line 465 in file prac5.s
      At line 481 in file prac5.s
      At line 497 in file prac5.s
      At line 513 in file prac5.s

movleft 00000658

Symbol: movleft
   Definitions
      At line 545 in file prac5.s
   Uses
      At line 537 in file prac5.s
Comment: movleft used once
movrigt 000006A8

Symbol: movrigt
   Definitions
      At line 566 in file prac5.s
   Uses
      At line 539 in file prac5.s
Comment: movrigt used once
movup 000006F8

Symbol: movup
   Definitions
      At line 587 in file prac5.s
   Uses
      At line 541 in file prac5.s
Comment: movup used once
newfantasma 000001DC

Symbol: newfantasma
   Definitions
      At line 221 in file prac5.s
   Uses



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

      At line 217 in file prac5.s
Comment: newfantasma used once
newtecl 000008A4

Symbol: newtecl
   Definitions
      At line 721 in file prac5.s
   Uses
      At line 716 in file prac5.s
Comment: newtecl used once
numpts 000000C4

Symbol: numpts
   Definitions
      At line 134 in file prac5.s
   Uses
      At line 129 in file prac5.s
Comment: numpts used once
numvds 00000084

Symbol: numvds
   Definitions
      At line 117 in file prac5.s
   Uses
      At line 112 in file prac5.s
Comment: numvds used once
pacmove 000002C4

Symbol: pacmove
   Definitions
      At line 287 in file prac5.s
   Uses
      At line 213 in file prac5.s
      At line 218 in file prac5.s

pillado 000007F4

Symbol: pillado
   Definitions
      At line 665 in file prac5.s
   Uses
      At line 645 in file prac5.s
      At line 650 in file prac5.s
      At line 655 in file prac5.s
      At line 660 in file prac5.s

plus 0000095C

Symbol: plus
   Definitions
      At line 768 in file prac5.s
   Uses
      At line 760 in file prac5.s
Comment: plus used once
print 00000A7C

Symbol: print
   Definitions
      At line 854 in file prac5.s



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 859 in file prac5.s
Comment: print used once
print2 00000AAC

Symbol: print2
   Definitions
      At line 867 in file prac5.s
   Uses
      At line 872 in file prac5.s
Comment: print2 used once
print3 00000ACC

Symbol: print3
   Definitions
      At line 876 in file prac5.s
   Uses
      At line 881 in file prac5.s
Comment: print3 used once
printpt 000000AC

Symbol: printpt
   Definitions
      At line 128 in file prac5.s
   Uses
      At line 133 in file prac5.s
Comment: printpt used once
printvd 0000006C

Symbol: printvd
   Definitions
      At line 111 in file prac5.s
   Uses
      At line 116 in file prac5.s
Comment: printvd used once
pts 0000009C

Symbol: pts
   Definitions
      At line 124 in file prac5.s
   Uses
      At line 122 in file prac5.s
Comment: pts used once
q 000009A4

Symbol: q
   Definitions
      At line 786 in file prac5.s
   Uses
      At line 778 in file prac5.s
Comment: q used once
quit 00000AC4

Symbol: quit
   Definitions
      At line 874 in file prac5.s
   Uses
      At line 864 in file prac5.s
Comment: quit used once



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols

repeat 000001F4

Symbol: repeat
   Definitions
      At line 230 in file prac5.s
   Uses
      At line 236 in file prac5.s
Comment: repeat used once
s 000008FC

Symbol: s
   Definitions
      At line 744 in file prac5.s
   Uses
      At line 739 in file prac5.s
Comment: s used once
screen 00000034

Symbol: screen
   Definitions
      At line 95 in file prac5.s
   Uses
      At line 98 in file prac5.s
Comment: screen used once
start 0000010C

Symbol: start
   Definitions
      At line 153 in file prac5.s
   Uses
      At line 151 in file prac5.s
Comment: start used once
teclas 00000890

Symbol: teclas
   Definitions
      At line 713 in file prac5.s
   Uses
      At line 661 in file prac5.s
Comment: teclas used once
update 000009E0

Symbol: update
   Definitions
      At line 808 in file prac5.s
   Uses
      At line 717 in file prac5.s
Comment: update used once
vd 00000060

Symbol: vd
   Definitions
      At line 108 in file prac5.s
   Uses
      At line 104 in file prac5.s
Comment: vd used once
vertical 000003B0

Symbol: vertical



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 353 in file prac5.s
   Uses
      At line 311 in file prac5.s
Comment: vertical used once
w 000008E4

Symbol: w
   Definitions
      At line 738 in file prac5.s
   Uses
      At line 733 in file prac5.s
Comment: w used once
win 00000A5C

Symbol: win
   Definitions
      At line 846 in file prac5.s
   Uses
      None
Comment: win unused
62 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

DOWN 40007FFF

Symbol: DOWN
   Definitions
      At line 24 in file prac5.s
   Uses
      At line 93 in file prac5.s
      At line 337 in file prac5.s
      At line 384 in file prac5.s
      At line 568 in file prac5.s
      At line 611 in file prac5.s
      At line 837 in file prac5.s

IOCLR E002800C

Symbol: IOCLR
   Definitions
      At line 16 in file prac5.s
   Uses
      None
Comment: IOCLR unused
IOSET E0028004

Symbol: IOSET
   Definitions
      At line 15 in file prac5.s
   Uses
      None
Comment: IOSET unused
IRQ_I4 00000004

Symbol: IRQ_I4
   Definitions
      At line 8 in file prac5.s
   Uses
      At line 184 in file prac5.s
      At line 196 in file prac5.s
      At line 888 in file prac5.s

IRQ_I7 00000007

Symbol: IRQ_I7
   Definitions
      At line 9 in file prac5.s
   Uses
      At line 190 in file prac5.s
      At line 197 in file prac5.s
      At line 889 in file prac5.s

I_Bit 00000080

Symbol: I_Bit
   Definitions
      At line 10 in file prac5.s
   Uses
      At line 906 in file prac5.s
      At line 931 in file prac5.s
      At line 954 in file prac5.s
      At line 1002 in file prac5.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


MARCADOR 40007E00

Symbol: MARCADOR
   Definitions
      At line 21 in file prac5.s
   Uses
      At line 100 in file prac5.s
      At line 108 in file prac5.s
      At line 124 in file prac5.s

MARCPUNTOS 40007E1A

Symbol: MARCPUNTOS
   Definitions
      At line 26 in file prac5.s
   Uses
      At line 134 in file prac5.s
      At line 813 in file prac5.s

MARCVIDAS 40007E07

Symbol: MARCVIDAS
   Definitions
      At line 25 in file prac5.s
   Uses
      At line 117 in file prac5.s
      At line 808 in file prac5.s

MID 40007EEC

Symbol: MID
   Definitions
      At line 23 in file prac5.s
   Uses
      At line 844 in file prac5.s
Comment: MID used once
T0_IR E0004000

Symbol: T0_IR
   Definitions
      At line 17 in file prac5.s
   Uses
      At line 79 in file prac5.s
      At line 909 in file prac5.s

TEC_DAT E0010000

Symbol: TEC_DAT
   Definitions
      At line 18 in file prac5.s
   Uses
      At line 957 in file prac5.s
Comment: TEC_DAT used once
UP 40007E20

Symbol: UP
   Definitions
      At line 22 in file prac5.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 92 in file prac5.s
      At line 101 in file prac5.s
      At line 237 in file prac5.s
      At line 319 in file prac5.s
      At line 365 in file prac5.s
      At line 547 in file prac5.s
      At line 589 in file prac5.s
      At line 836 in file prac5.s

VICIntEnClr FFFFF014

Symbol: VICIntEnClr
   Definitions
      At line 6 in file prac5.s
   Uses
      At line 886 in file prac5.s
Comment: VICIntEnClr used once
VICIntEnable FFFFF010

Symbol: VICIntEnable
   Definitions
      At line 5 in file prac5.s
   Uses
      At line 194 in file prac5.s
Comment: VICIntEnable used once
VICVectAddr FFFFF030

Symbol: VICVectAddr
   Definitions
      At line 13 in file prac5.s
   Uses
      At line 938 in file prac5.s
      At line 1009 in file prac5.s

VICVectAddr0 FFFFF100

Symbol: VICVectAddr0
   Definitions
      At line 12 in file prac5.s
   Uses
      At line 182 in file prac5.s
      At line 188 in file prac5.s

arrobapos1 40007EEF

Symbol: arrobapos1
   Definitions
      At line 27 in file prac5.s
   Uses
      At line 161 in file prac5.s
      At line 687 in file prac5.s

arrobapos2 40007EF0

Symbol: arrobapos2
   Definitions
      At line 28 in file prac5.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      At line 166 in file prac5.s
      At line 692 in file prac5.s

arrobapos3 40007F0F

Symbol: arrobapos3
   Definitions
      At line 29 in file prac5.s
   Uses
      At line 171 in file prac5.s
      At line 697 in file prac5.s

arrobapos4 40007F10

Symbol: arrobapos4
   Definitions
      At line 30 in file prac5.s
   Uses
      At line 176 in file prac5.s
      At line 702 in file prac5.s

mask9 000001FF

Symbol: mask9
   Definitions
      At line 60 in file prac5.s
   Uses
      At line 233 in file prac5.s
Comment: mask9 used once
22 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

rand 00000000

Symbol: rand
   Definitions
      At line 75 in file prac5.s
   Uses
      At line 83 in file prac5.s
      At line 156 in file prac5.s
      At line 205 in file prac5.s
      At line 231 in file prac5.s
      At line 275 in file prac5.s
      At line 533 in file prac5.s
      At line 682 in file prac5.s

srand 00000000

Symbol: srand
   Definitions
      At line 74 in file prac5.s
   Uses
      At line 81 in file prac5.s
Comment: srand used once
2 symbols
453 symbols in table
